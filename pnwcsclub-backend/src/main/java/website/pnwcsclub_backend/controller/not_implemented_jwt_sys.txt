package website.pnwcsclub_backend.controller;

import java.security.MessageDigest;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@CrossOrigin
@RestController
@RequestMapping("/api")
public class PNWCSClubController {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Value("${auth.code}")
    private String validAuthCode;

    @GetMapping("/test")
    public String test() {
        return "Hello, test1!";
    }

    @GetMapping("/test2")
    public String test2() {
        return "Hello, test2!";
    }

    @Data
    public static class RegistrationRequest {
        @NotBlank(message = "Username is required")
        @Size(min = 3, max = 50, message = "Username must be between 3 and 50 characters")
        @Pattern(regexp = "^[a-zA-Z0-9_-]+$", message = "Username can only contain letters, numbers, underscores, and hyphens")
        private String username;

        @NotBlank(message = "Password is required")
        @Size(min = 8, message = "Password must be at least 8 characters")
        private String password;

        @NotBlank(message = "Auth code is required")
        private String authCode;
    }

    @Data
    public static class LoginRequest {
        @NotBlank(message = "Username is required")
        private String username;

        @NotBlank(message = "Password is required")
        private String password;
    }

    @PostMapping("/createLogin")
    public ResponseEntity<?> createLogin(@Valid @RequestBody RegistrationRequest request) {
        if (!MessageDigest.isEqual(
            request.getAuthCode().getBytes(),
            validAuthCode.getBytes()
        )) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                               .body("Invalid registration attempt");
        }

        String checkSql = "SELECT COUNT(*) FROM users WHERE LOWER(username) = LOWER(?)";
        int count = jdbcTemplate.queryForObject(checkSql, Integer.class, request.getUsername());
        if (count > 0) {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                               .body("Username not available");
        }

        String passHash = BCrypt.hashpw(request.getPassword(), BCrypt.gensalt(12));
        String sql = "INSERT INTO users (username, password_hash, created_at) VALUES (?, ?, NOW())";
        
        try {
            jdbcTemplate.update(sql, 
                request.getUsername(),
                passHash
            );
            return ResponseEntity.ok("Account created successfully");
        } catch (Exception e) {
            log.error("Error creating account", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                               .body("An error occurred");
        }
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@Valid @RequestBody LoginRequest login) {
        try {
            String sql = "SELECT user_id, password_hash FROM users WHERE LOWER(username) = LOWER(?)";
            List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql, login.getUsername());

            if (rows.isEmpty() || !BCrypt.checkpw(login.getPassword(), (String) rows.get(0).get("password_hash"))) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                                   .body("Invalid credentials");
            }

            return ResponseEntity.ok("Login successful");
        } catch (Exception e) {
            log.error("Login error", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                               .body("An error occurred");
        }
    }

    //TEMPORARY REMOVE LATER
    @GetMapping("/getLogin")
    public String getLogin() {
        String sql = "SELECT * FROM users";
        List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql); 
        return rows.toString();
    }
}